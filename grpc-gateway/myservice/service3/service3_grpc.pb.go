// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Service3Client is the client API for Service3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service3Client interface {
	Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoUpload(ctx context.Context, opts ...grpc.CallOption) (Service3_EchoUploadClient, error)
}

type service3Client struct {
	cc grpc.ClientConnInterface
}

func NewService3Client(cc grpc.ClientConnInterface) Service3Client {
	return &service3Client{cc}
}

func (c *service3Client) Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/myservice.Service3/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service3Client) EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/myservice.Service3/EchoBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service3Client) EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/myservice.Service3/EchoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service3Client) EchoUpload(ctx context.Context, opts ...grpc.CallOption) (Service3_EchoUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service3_serviceDesc.Streams[0], "/myservice.Service3/EchoUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &service3EchoUploadClient{stream}
	return x, nil
}

type Service3_EchoUploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type service3EchoUploadClient struct {
	grpc.ClientStream
}

func (x *service3EchoUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *service3EchoUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service3Server is the server API for Service3 service.
// All implementations must embed UnimplementedService3Server
// for forward compatibility
type Service3Server interface {
	Echo(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoBody(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoDelete(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoUpload(Service3_EchoUploadServer) error
	mustEmbedUnimplementedService3Server()
}

// UnimplementedService3Server must be embedded to have forward compatible implementations.
type UnimplementedService3Server struct {
}

func (*UnimplementedService3Server) Echo(context.Context, *SimpleMessage) (*SimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedService3Server) EchoBody(context.Context, *SimpleMessage) (*SimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoBody not implemented")
}
func (*UnimplementedService3Server) EchoDelete(context.Context, *SimpleMessage) (*SimpleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoDelete not implemented")
}
func (*UnimplementedService3Server) EchoUpload(Service3_EchoUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoUpload not implemented")
}
func (*UnimplementedService3Server) mustEmbedUnimplementedService3Server() {}

func RegisterService3Server(s *grpc.Server, srv Service3Server) {
	s.RegisterService(&_Service3_serviceDesc, srv)
}

func _Service3_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service3Server).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.Service3/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service3Server).Echo(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service3_EchoBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service3Server).EchoBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.Service3/EchoBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service3Server).EchoBody(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service3_EchoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service3Server).EchoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.Service3/EchoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service3Server).EchoDelete(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service3_EchoUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Service3Server).EchoUpload(&service3EchoUploadServer{stream})
}

type Service3_EchoUploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type service3EchoUploadServer struct {
	grpc.ServerStream
}

func (x *service3EchoUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *service3EchoUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service3_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myservice.Service3",
	HandlerType: (*Service3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Service3_Echo_Handler,
		},
		{
			MethodName: "EchoBody",
			Handler:    _Service3_EchoBody_Handler,
		},
		{
			MethodName: "EchoDelete",
			Handler:    _Service3_EchoDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoUpload",
			Handler:       _Service3_EchoUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service3.proto",
}
